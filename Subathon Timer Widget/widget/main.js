// ✨ Premium Subathon Timer Widget - Main JavaScript// Beautiful, feature-rich timer with modern animations and effectsclass SubathonTimer {    constructor() {        this.config = null;        this.timeRemaining = 5425; // Demo time: 1 hour 30 minutes 25 seconds        this.isRunning = true;        this.currentStats = {            subs: 247,            bits: 12500,            tips: 892        };        this.milestones = [];        this.currentMilestoneIndex = 0;        this.socket = null;        this.animationInterval = null;                this.init();    }    async init() {        try {            // Load configuration            await this.loadConfig();                        // Initialize UI with demo data            this.initializeUI();                        // Start timer animation            this.startTimer();                        // Connect to StreamElements (if token provided)            this.connectToStreamElements();                        // Create particle effects            this.createParticles();                        // Start demo animations            this.startDemoMode();                        console.log('✨ Premium Subathon Timer initialized successfully!');        } catch (error) {            console.error('❌ Failed to initialize timer:', error);            this.showAlert('Premium timer initialized with demo data', 'success');        }    }    async loadConfig() {        try {            const response = await fetch('../config.json');            this.config = await response.json();                        // Apply theme            this.applyTheme();                        // Set initial values            this.timeRemaining = this.config.initialTime || 5425;            this.milestones = this.config.milestones || [];                    } catch (error) {            console.warn('⚠️ Could not load config.json, using premium defaults');            this.useDefaultConfig();        }    }    useDefaultConfig() {        this.config = {            initialTime: 5425,            timePerSub: 300,            timePerBit: 1,            timePerTip: 60,            milestones: [                {                    id: 1,                    goal: 300,                    type: 'subs',                    title: '300 Subs Milestone!',                    reward: '🎮 New Game Reveal + Special Stream Event!',                    color: '#667eea'                },                {                    id: 2,                    goal: 500,                    type: 'subs',                    title: '500 Subs Celebration!',                    reward: '🎉 24-Hour Marathon Stream!',                    color: '#f093fb'                }            ],            theme: {                primaryColor: '#667eea',                secondaryColor: '#f093fb',                accentColor: '#4facfe',                backgroundColor: 'rgba(0, 0, 0, 0.8)',                textColor: '#ffffff'            }        };    }    applyTheme() {        if (!this.config.theme) return;                const root = document.documentElement;        const theme = this.config.theme;                // Apply CSS custom properties for theming        if (theme.primaryColor) {            root.style.setProperty('--primary-gradient',                 `linear-gradient(135deg, ${theme.primaryColor}, ${theme.secondaryColor || '#764ba2'})`);        }        if (theme.secondaryColor) {            root.style.setProperty('--secondary-gradient',                 `linear-gradient(135deg, ${theme.secondaryColor}, ${theme.accentColor || '#f5576c'})`);        }        if (theme.accentColor) {            root.style.setProperty('--accent-gradient',                 `linear-gradient(135deg, ${theme.accentColor}, #00f2fe)`);        }    }    initializeUI() {        // Set initial timer display        this.updateTimerDisplay();                // Set initial stats        this.updateStats();                // Set milestone progress        this.updateMilestoneProgress();                // Initialize events list with demo data        this.initializeDemoEvents();                // Add interactive effects        this.addInteractiveEffects();    }    updateTimerDisplay() {        const hours = Math.floor(this.timeRemaining / 3600);        const minutes = Math.floor((this.timeRemaining % 3600) / 60);        const seconds = this.timeRemaining % 60;        const hoursEl = document.getElementById('hours');        const minutesEl = document.getElementById('minutes');        const secondsEl = document.getElementById('seconds');        if (hoursEl) {            this.animateValueChange(hoursEl, String(hours).padStart(2, '0'));        }        if (minutesEl) {            this.animateValueChange(minutesEl, String(minutes).padStart(2, '0'));        }        if (secondsEl) {            this.animateValueChange(secondsEl, String(seconds).padStart(2, '0'));        }        // Update status        const statusEl = document.getElementById('timer-status');        if (statusEl) {            if (this.timeRemaining > 0) {                statusEl.textContent = '⏰ Time remaining until stream ends';            } else {                statusEl.textContent = '🎉 Subathon completed! Thank you!';            }        }    }    animateValueChange(element, newValue) {        if (element.textContent !== newValue) {            // Add change animation            element.style.animation = 'valueCount 0.6s ease-out';            element.textContent = newValue;                        // Reset animation            setTimeout(() => {                element.style.animation = 'digitGlow 2s ease-in-out infinite alternate';            }, 600);        }    }    updateStats() {        const subCountEl = document.getElementById('sub-count');        const bitCountEl = document.getElementById('bit-count');        const tipCountEl = document.getElementById('tip-count');        if (subCountEl) {            this.animateValueChange(subCountEl, this.formatNumber(this.currentStats.subs));        }        if (bitCountEl) {            this.animateValueChange(bitCountEl, this.formatNumber(this.currentStats.bits));        }        if (tipCountEl) {            this.animateValueChange(tipCountEl, '$' + this.formatNumber(this.currentStats.tips));        }    }    formatNumber(num) {        if (num >= 1000000) {            return (num / 1000000).toFixed(1) + 'M';        } else if (num >= 1000) {            return (num / 1000).toFixed(1) + 'K';        }        return num.toString();    }    updateMilestoneProgress() {        const currentMilestone = this.milestones[this.currentMilestoneIndex];        if (!currentMilestone) return;        const progressEl = document.getElementById('progress-fill');        const percentageEl = document.getElementById('progress-percentage');        const goalEl = document.getElementById('milestone-goal');        const rewardEl = document.getElementById('milestone-reward');        if (currentMilestone.type === 'subs') {            const progress = (this.currentStats.subs / currentMilestone.goal) * 100;            const clampedProgress = Math.min(progress, 100);                        if (progressEl) {                progressEl.style.width = clampedProgress + '%';            }            if (percentageEl) {                percentageEl.textContent = Math.floor(clampedProgress) + '%';            }            if (goalEl) {                goalEl.textContent = `${currentMilestone.goal} Subscribers`;            }            if (rewardEl) {                rewardEl.textContent = currentMilestone.reward;            }            // Check if milestone reached            if (this.currentStats.subs >= currentMilestone.goal && !currentMilestone.reached) {                this.triggerMilestoneCelebration(currentMilestone);                currentMilestone.reached = true;                this.currentMilestoneIndex++;            }        }    }    triggerMilestoneCelebration(milestone) {        // Show celebration overlay        const overlay = document.getElementById('celebration-overlay');        const text = document.getElementById('celebration-text');        const subtext = document.getElementById('celebration-subtext');        if (overlay && text && subtext) {            text.textContent = milestone.title;            subtext.textContent = `🎉 ${milestone.reward}`;            overlay.classList.add('active');            // Hide after 5 seconds            setTimeout(() => {                overlay.classList.remove('active');            }, 5000);        }        // Trigger particle celebration        if (window.premiumEffects) {            window.premiumEffects.triggerCelebration();        }        // Show alert        this.showAlert(`Milestone Reached: ${milestone.title}`, 'success');    }    startTimer() {        this.animationInterval = setInterval(() => {            if (this.isRunning && this.timeRemaining > 0) {                this.timeRemaining--;                this.updateTimerDisplay();            }        }, 1000);    }    startDemoMode() {        // Simulate subscriber increases every 15-30 seconds        setInterval(() => {            if (Math.random() > 0.7) { // 30% chance                this.simulateNewSubscriber();            }        }, Math.random() * 15000 + 15000);        // Simulate bit donations every 20-40 seconds        setInterval(() => {            if (Math.random() > 0.8) { // 20% chance                this.simulateBitDonation();            }        }, Math.random() * 20000 + 20000);        // Simulate tips every 30-60 seconds        setInterval(() => {            if (Math.random() > 0.9) { // 10% chance                this.simulateTipDonation();            }        }, Math.random() * 30000 + 30000);    }    simulateNewSubscriber() {        this.currentStats.subs++;        this.timeRemaining += this.config.timePerSub || 300;                const usernames = ['StreamerFan123', 'NewFollower99', 'PremiumViewer', 'TechNinja42', 'GenerousSupporter'];        const username = usernames[Math.floor(Math.random() * usernames.length)];                this.addEvent('SUB', username, '+5:00');        this.updateStats();        this.updateMilestoneProgress();                this.showAlert(`New Subscriber: ${username}`, 'success');    }    simulateBitDonation() {        const bitAmount = Math.floor(Math.random() * 500) + 100;        this.currentStats.bits += bitAmount;        this.timeRemaining += Math.floor(bitAmount * (this.config.timePerBit || 1));                const usernames = ['BitDonator', 'CheererPro', 'SupportiveViewer', 'TechNinja42'];        const username = usernames[Math.floor(Math.random() * usernames.length)];                this.addEvent('BITS', username, '+2:30');        this.updateStats();                this.showAlert(`${bitAmount} bits from ${username}`, 'info');    }    simulateTipDonation() {        const tipAmount = Math.floor(Math.random() * 50) + 10;        this.currentStats.tips += tipAmount;        this.timeRemaining += tipAmount * (this.config.timePerTip || 60);                const usernames = ['GenerousViewer', 'BigTipper', 'AmazingSupporter', 'KindDonator'];        const username = usernames[Math.floor(Math.random() * usernames.length)];                this.addEvent('TIP', username, '+10:00');        this.updateStats();                this.showAlert(`$${tipAmount} tip from ${username}`, 'success');    }    addEvent(type, user, time) {        const eventsList = document.getElementById('events-list');        if (!eventsList) return;        const eventItem = document.createElement('div');        eventItem.className = 'event-item';        eventItem.innerHTML = `            <span class="event-type">${type}</span>            <span class="event-user">${user}</span>            <span class="event-time">${time}</span>        `;        eventsList.insertBefore(eventItem, eventsList.firstChild);        // Remove old events (keep only 4)        while (eventsList.children.length > 4) {            eventsList.removeChild(eventsList.lastChild);        }    }    initializeDemoEvents() {        const demoEvents = [            { type: 'SUB', user: 'StreamerFan123', time: '+5:00' },            { type: 'BITS', user: 'TechNinja42', time: '+2:30' },            { type: 'TIP', user: 'GenerousViewer', time: '+10:00' },            { type: 'SUB', user: 'NewFollower99', time: '+5:00' }        ];        demoEvents.forEach(event => {            this.addEvent(event.type, event.user, event.time);        });    }    addInteractiveEffects() {        // Add click effects to timer segments        const timeSegments = document.querySelectorAll('.time-segment');        timeSegments.forEach(segment => {            segment.addEventListener('click', () => {                if (window.premiumEffects) {                    window.premiumEffects.addPulseGlow(segment);                }            });        });    }    showAlert(message, type = 'info') {        const alertContainer = document.getElementById('alert-container');        if (!alertContainer) return;        const alert = document.createElement('div');        alert.className = 'alert';        alert.innerHTML = `            <div class="alert-title">${type === 'success' ? '✅' : type === 'error' ? '❌' : 'ℹ️'} ${type.toUpperCase()}</div>            <div class="alert-message">${message}</div>        `;        alertContainer.appendChild(alert);        // Remove alert after 5 seconds        setTimeout(() => {            alert.remove();        }, 5000);    }    createParticles() {        const particleContainer = document.getElementById('particles-container');        if (!particleContainer) return;        // Create background particles        for (let i = 0; i < 15; i++) {            const particle = document.createElement('div');            particle.className = 'particle';                        particle.style.left = Math.random() * 100 + '%';            particle.style.top = Math.random() * 100 + '%';            particle.style.animationDelay = Math.random() * 8 + 's';            particle.style.animationDuration = (Math.random() * 4 + 6) + 's';                        particleContainer.appendChild(particle);        }    }    connectToStreamElements() {        // StreamElements integration placeholder        console.log('🔗 StreamElements integration ready');        console.log('💡 Add your StreamElements token to config.json for live data');    }    // Public methods for external control    addTime(seconds) {        this.timeRemaining += seconds;        this.updateTimerDisplay();        this.showAlert(`Added ${seconds} seconds to timer`, 'success');    }    addSubscriber(username = 'Anonymous') {        this.currentStats.subs++;        this.timeRemaining += this.config.timePerSub || 300;        this.addEvent('SUB', username, '+5:00');        this.updateStats();        this.updateMilestoneProgress();        this.showAlert(`New Subscriber: ${username}`, 'success');    }    addBits(amount, username = 'Anonymous') {        this.currentStats.bits += amount;        this.timeRemaining += Math.floor(amount * (this.config.timePerBit || 1));        this.addEvent('BITS', username, `+${Math.floor(amount/60)}:${String(amount%60).padStart(2, '0')}`);        this.updateStats();        this.showAlert(`${amount} bits from ${username}`, 'info');    }    addTip(amount, username = 'Anonymous') {        this.currentStats.tips += amount;        this.timeRemaining += amount * (this.config.timePerTip || 60);        this.addEvent('TIP', username, `+${Math.floor(amount)}:00`);        this.updateStats();        this.showAlert(`$${amount} tip from ${username}`, 'success');    }    toggleTimer() {        this.isRunning = !this.isRunning;        this.showAlert(this.isRunning ? 'Timer resumed' : 'Timer paused', 'info');    }}// Initialize the timer when DOM is loadeddocument.addEventListener('DOMContentLoaded', () => {    window.subathonTimer = new SubathonTimer();        // Make functions available in console for testing    window.addSub = (username) => window.subathonTimer.addSubscriber(username);    window.addBits = (amount, username) => window.subathonTimer.addBits(amount, username);    window.addTip = (amount, username) => window.subathonTimer.addTip(amount, username);    window.toggleTimer = () => window.subathonTimer.toggleTimer();        console.log('✨ Premium Subathon Timer loaded!');    console.log('💡 Try these commands in console:');    console.log('   addSub("YourName") - Add a subscriber');    console.log('   addBits(500, "YourName") - Add bits');    console.log('   addTip(25, "YourName") - Add tip');    console.log('   toggleTimer() - Pause/resume timer');});